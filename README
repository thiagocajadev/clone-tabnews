Ol√° Dev!

Esse projeto √© voltado para estudos com base no [curso.dev](https://curso.dev).üå±

# Preparando o ambiente

Aqui vamos preparar a stack de desenvolvimento, empilhando as aplica√ß√µes sobre o Node, sendo assim:

- Node.js LTS Hydrogen 
- Next.js 13.1.6
- React.js 18.2.0
- React-dom 18.2.0


1. Aplique os comandos no terminal para configurar as vers√µes do framework e demais depend√™ncias:

    ``` code
        // Checa vers√£o atual do Node no Codespaces.
        node -v

        // Verifica as vers√µes dispon√≠veis pra instala√ß√£o com o gerenciador de pacotes do Node, o NVM.
        nvm ls

        // Instalar vers√£o com suporte extendido (LTS).
        nvm install lts/hydrogen

        // Configurar para sempre iniciar com a vers√£o LTS
        nvm alias default lts/hydrogen
    ```

2. Crie o arquivo .nvmrc:

    O RC no final significa Run Commands. √â uma convens√£o para execu√ß√£o de scripts e instru√ß√µes de inicializa√ß√£o.

    ```code
    // Adicione a instru√ß√£o para usar a vers√£o instalada
    lts/hydrogen
    ```

    Agora ao executar **nvm install**, ser√° direcionado a essa vers√£o.

3. Instale o Next.js

    ```code
    // Use o gerenciador de pacotes do Node para configurar e preparar a instala√ß√£o do Next.js. Ser√° criado o arquivo package.json com as configura√ß√µes.
    npm init

    // Instale o Next.js. Todas as depencias do projeto ser√£o incluidas no package.json
    npm install next@13.1.6
    ```

4. Instale o React.js
    ```code
    // O react ser√° o frontend, vamos criar as telas da aplica√ß√£o nele.
    // Instalamos primeiro o Core
    npm install react@18.2.0

    // Agora instalamos o m√≥dulo espec√≠fico para Html
    npm install react-dom@18.2.0
    ```

5. Configure o servidor web para rodar a aplica√ß√£o.
    Altere o package.json para execu√ß√£o, ele ficar√° igual o abaixo:

    ```code
    {
        "name": "clone-tabnews",
        "version": "1.0.0",
        "description": "projeto do curso.dev",
        "main": "index.js",
        "scripts": {
            "dev": "next dev"
        },
        "author": "",
        "license": "MIT",
        "dependencies": {
            "next": "^13.1.6",
            "react": "^18.2.0",
            "react-dom": "^18.2.0"
        }
    }
    ```
    Para executar no terminal use **npm run dev**

# Criando Paginas

1. Crie na pasta **pages** no projeto. Essa pasta ser√° lida pelo Next para encontrar as paginas.

2. Crie um arquivo dentro da pasta chamado index.js. Essa ser√° a rota para Home.
    ```code
    // Dentro das paginas criamos fun√ß√µes para renderizar os conte√∫dos e exportamos a fun√ß√£o padr√£o.
    function Home(){
        return <h1>Teste</h1>
    }

    export default Home;
    ```

3. Torne a rota publica para acesso externo.
    No terminal, clique na aba Portas, bot√£o direito em Visibilidade -> Visibilidade da porta -> Public.

# Salvando o projeto no GitHub

1. Crie um arquivo chamado .gitignore. Aqui vamos informar arquivos e pastas para n√£o ficarem no controle de vers√£o.

2. Use o comando **git status** para avaliar as altera√ß√µes feitas no projeto.

3. Use o comando **git add .gitignore** para adicionar o arquivo ao rastreamento do git. 

4. Caso haja altera√ß√µes em qualquer arquivo, basta executar novamente o git add.

